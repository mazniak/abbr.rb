= abbr

Syntax sugar to construct ruby classes with lazy, memoized instnace members

  class CostlyThing < Abbr::Object
    abbr_init :x, :y

    # z is costly, memoization desirable
    let(:z) { x + y }
  end

  module CostlyPattern
    extend Abbr::Mixin

    let(:z) { costly }
  end

  class AdditiveCostlyPattern
    include CostlyPattern

    abbr_init :x, :y

    def costly
      x + y
    end
  end

  class MultiplicativeCostlyPattern
    include CostlyPattern

    def initialize(x, y)
      @x, @y = x, y
    end

    def costly
      x * y
    end
  end

  costly = AdditiveCostlyPattern.new(3, 4)
  costly.z # costly.z only evaluated once
  costly.z # then its return value is memoized
  costly.z # for subsequent invokations

== TODO
* better examples

== Contributing to abbr
 
* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet.
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it.
* Fork the project.
* Start a feature/bugfix branch.
* Commit and push until you are happy with your contribution.
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.

== Copyright

Copyright (c) 2017 Matthew Wozniak. See LICENSE.txt for
further details.
